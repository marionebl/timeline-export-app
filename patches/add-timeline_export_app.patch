diff --git a/BUILD.gn b/BUILD.gn
index 74b0ee05..fe7cd2a7 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -769,6 +769,7 @@ application_templates = [
   "front_end/node_app.html",
   "front_end/toolbox.html",
   "front_end/worker_app.html",
+  "front_end/timeline_export_app.html",
 ]
 
 generated_applications = [
@@ -786,6 +787,7 @@ generated_applications = [
   "$resources_out_dir/toolbox.js",
   "$resources_out_dir/worker_app.html",
   "$resources_out_dir/worker_app.js",
+  "$resources_out_dir/timeline_export_app.js",
 ]
 
 generated_non_autostart_non_remote_modules = [
@@ -898,6 +900,7 @@ devtools_applications = [
   "toolbox",
   "wasmparser_worker_entrypoint",
   "worker_app",
+  "timeline_export_app"
 ]
 
 #-------------------------------------------------------------------------------
diff --git a/front_end/timeline_export_app.html b/front_end/timeline_export_app.html
new file mode 100644
index 00000000..f9f2adaf
--- /dev/null
+++ b/front_end/timeline_export_app.html
@@ -0,0 +1,15 @@
+<!--
+ * Copyright 2014 The Chromium Authors. All rights reserved.
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+-->
+<!doctype html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta http-equiv="Content-Security-Policy" content="object-src 'none'; script-src 'self' 'unsafe-eval' 'unsafe-inline' ">
+    <script type="module" src="root.js"></script>
+    <script type="module" src="timeline_export_app.js"></script>
+</head>
+<body class="undocked" id="-blink-dev-tools"></body>
+</html>
diff --git a/front_end/timeline_export_app.js b/front_end/timeline_export_app.js
new file mode 100644
index 00000000..b81f0000
--- /dev/null
+++ b/front_end/timeline_export_app.js
@@ -0,0 +1,86 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+import {startApplication} from './RuntimeInstantiator.js';
+
+startApplication('timeline_export_app');
+
+Runtime.appStarted
+  .then(() => poll(() => self.UI.panels.timeline))
+  .then(main);
+
+async function poll(fn, { timeout, step } = { timeout: 10000, step: 500 }) {
+  const now = performance.now();
+  const result = fn();
+
+  if (typeof result === 'undefined') {
+    await wait(step);
+    return poll(fn, timeout - performance.now() - now);
+  }
+
+  return result;
+}
+
+function wait(duration) {
+  return new Promise(resolve => setTimeout(resolve, duration));
+}
+
+function parseTimeWindow(input) {
+  const fragments = input.split('::');
+
+  if (fragments.length !== 2) {
+    return null;
+  }
+
+  const [rawStartFragment, rawEndFragment] = fragments;
+
+  if (!rawStartFragment.startsWith('start:') || !rawEndFragment.startsWith('end')) {
+    return null;
+  }
+
+  const startFragment = rawStartFragment.replace('start:', '');
+  const endFragment = rawEndFragment.replace('end:', '');
+
+  const startTime = parseFloat(startFragment);
+  const endTime = parseFloat(endFragment);
+
+  if (Number.isNaN(startTime) || Number.isNaN(endTime)) {
+    return null;
+  }
+
+  return { startTime, endTime };
+}
+
+function main(panel) {
+  const originalLoadingComplete = panel.loadingComplete.bind(panel);
+
+  panel.loadingComplete = (...args) => {
+    const result = originalLoadingComplete(...args);
+    const timeWindow = parseTimeWindow(window.location.hash.slice(1));
+
+    if (timeWindow) {
+      panel._overviewPane.setWindowTimes(timeWindow.startTime, timeWindow.endTime);
+    }
+
+    return result;
+  }
+
+  let hashTask;
+
+  panel._overviewPane.addEventListener(
+    PerfUI.TimelineOverviewPane.Events.WindowChanged, ({data: {startTime, endTime}}) => {
+      if (hashTask) {
+        window.cancelIdleCallback(hashTask);
+      }
+
+      hashTask = window.requestIdleCallback(() => {
+        window.location.hash = ['start:', startTime.toFixed(2), '::', 'end:', endTime.toFixed(2)].join('');
+      });
+    });
+
+  const profileUrl = document.body.dataset.queryable 
+    ? new URLSearchParams(location.search).get('profile')
+    : './profile.json'
+  
+  profileUrl && panel._loadFromURL(profileUrl);
+}
diff --git a/front_end/timeline_export_app.json b/front_end/timeline_export_app.json
new file mode 100644
index 00000000..81cb01e9
--- /dev/null
+++ b/front_end/timeline_export_app.json
@@ -0,0 +1,42 @@
+{
+  "modules": [
+    { "name": "mobile_throttling", "type": "autostart" },
+    { "name": "bindings", "type": "autostart" },
+    { "name": "common", "type": "autostart" },
+    { "name": "components", "type": "autostart" },
+    { "name": "dom_extension", "type": "autostart" },
+    { "name": "extensions", "type": "autostart" },
+    { "name": "host", "type": "autostart" },
+    { "name": "main", "type": "autostart" },
+    { "name": "persistence", "type": "autostart" },
+    { "name": "platform", "type": "autostart" },
+    { "name": "protocol_client", "type": "autostart" },
+    { "name": "sdk", "type": "autostart" },
+    { "name": "browser_sdk", "type": "autostart" },
+    { "name": "services", "type": "autostart" },
+    { "name": "text_utils", "type": "autostart" },
+    { "name": "ui", "type": "autostart" },
+    { "name": "workspace", "type": "autostart" },
+
+    { "name": "layer_viewer" },
+    { "name": "performance_monitor" },
+    { "name": "timeline" },
+    { "name": "timeline_model" },
+    { "name": "cm" },
+    { "name": "cm_web_modes" },
+    { "name": "coverage" },
+    { "name": "data_grid" },
+    { "name": "diff" },
+    { "name": "formatter" },
+    { "name": "heap_snapshot_model" },
+    { "name": "object_ui" },
+    { "name": "perf_ui" },
+    { "name": "profiler" },
+    { "name": "quick_open" },
+    { "name": "search" },
+    { "name": "source_frame" },
+    { "name": "text_editor" },
+    { "name": "workspace_diff" }
+  ],
+  "has_html": true
+}
diff --git a/scripts/check_gn.js b/scripts/check_gn.js
index 31968b54..4e7c1003 100644
--- a/scripts/check_gn.js
+++ b/scripts/check_gn.js
@@ -10,7 +10,7 @@ const FRONTEND_PATH = path.resolve(__dirname, '..', 'front_end');
 
 const manifestModules = [];
 for (const config
-         of ['inspector.json', 'devtools_app.json', 'js_app.json', 'node_app.json', 'shell.json', 'worker_app.json']) {
+         of ['inspector.json', 'devtools_app.json', 'js_app.json', 'node_app.json', 'shell.json', 'worker_app.json', 'timeline_viewer_app.json']) {
   manifestModules.push(...require(path.resolve(FRONTEND_PATH, config)).modules);
 }
 
